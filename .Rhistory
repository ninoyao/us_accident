return(yhat)
}
nadaraya_watson(y, x, x, kern = kernel_k_nearest_neighbors, k = 2)
nadaraya_watson(y, x, x, kern = kernel_k_nearest_neighbors, k = 5)
knn_prediction <- nadaraya_watson(y, x, x, kern = kernel_k_nearest_neighbors, k = 5)
y_hat
lm
asd <- lm.fit(df_tr$times,df_tr$accel)
asd <- lm.fit(x,y)
?asd
class(asd)
View(asd)
lm(x,y)
knn_fit <- function(y, x, x0, kernel_k_nearest_neighbors, ...) {
k <- t(apply(x0, 1, function(x0_) {
k_ <- kern(x, x0_, ...)
k_/sum(k_)
}))
yhat <- drop(k %*% y)
attr(yhat, 'k') <- k
return(yhat)
}
knn_fit(y,x,x0)
## k-NN kernel function
## x  - n x p matrix of training inputs
## x0 - 1 x p input where to make prediction
## k  - number of nearest neighbors
kernel_k_nearest_neighbors <- function(x, x0, k) {
## compute distance betwen each x and x0
z <- t(t(x) - x0)
d <- sqrt(rowSums(z*z))
## initialize kernel weights to zero
w <- rep(0, length(d))
## set weight to 1 for k nearest neighbors
w[order(d)[1:k]] <- 1
return(w)
}
knn_fit <- function(y, x, x0, kern = kernel_k_nearest_neighbors, ...) {
k <- t(apply(x0, 1, function(x0_) {
k_ <- kern(x, x0_, ...)
k_/sum(k_)
}))
yhat <- drop(k %*% y)
attr(yhat, 'k') <- k
return(yhat)
}
knn_fit(y,x,x0)
knn_fit(y,x,x0,k = 5)
knn_fit(y,x,x0, k = 5)
knn_fit(y,x,x0, k = 5)
knn_fit(y,x,x, k = 5)
## k-NN kernel function
## x  - n x p matrix of training inputs
## x0 - 1 x p input where to make prediction
## k  - number of nearest neighbors
kernel_k_nearest_neighbors <- function(x, x0, k) {
## compute distance betwen each x and x0
z <- t(t(x) - x0)
d <- sqrt(rowSums(z*z))
## initialize kernel weights to zero
w <- rep(0, length(d))
## set weight to 1 for k nearest neighbors
w[order(d)[1:k]] <- 1
return(w)
}
knn_fit(y,x,x, k = 5)
knn_fit <- function(y, x, x0, kern = kernel_k_nearest_neighbors, ...) {
k <- t(apply(x0, 1, function(x0_) {
k_ <- kern(x, x0_, ...)
k_/sum(k_)
}))
yhat <- drop(k %*% y)
attr(yhat, 'k') <- k
return(yhat)
}
knn_fit(y,x,x, k = 5)
nadaraya_watson(y, x, x, kern = kernel_k_nearest_neighbors, k = 5)
View(knn_fit)
knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 5)
knnFit <- train(accel ~ .,method = "kknn", data = df_tr,tuneLength = 20)
knnFit
View(knn_fit)
knn_fit <- function(y, x, x0, kern = kernel_k_nearest_neighbors, ...) {
k <- t(apply(x0, 1, function(x0_) {
k_ <- kern(x, x0_, ...)
k_/sum(k_)
}))
yhat <- drop(k %*% y)
attr(yhat, 'k') <- k
return(yhat)
}
y3 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 3)
y7 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 7)
y9 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 9)
y15 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 15)
y21 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 21)
y25 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 25)
# predictions that varying the tuning parameter over a sequence of values
y3 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 3)
y7 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 7)
y9 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 9)
y15 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 15)
y21 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 21)
y25 <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = 25)
## Helper function to view kernel (smoother) matrix
matrix_image <- function(x) {
rot <- function(x) t(apply(x, 2, rev))
cls <- rev(gray.colors(20, end=1))
image(rot(x), col=cls, axes=FALSE)
xlb <- pretty(1:ncol(x))
xat <- (xlb-0.5)/ncol(x)
ylb <- pretty(1:nrow(x))
yat <- (ylb-0.5)/nrow(x)
axis(3, at=xat, labels=xlb)
axis(2, at=yat, labels=ylb)
mtext('Rows', 2, 3)
mtext('Columns', 3, 3)
}
## Compute effective df using NW method
## y  - n x 1 vector of training outputs
## x  - n x p matrix of training inputs
## kern  - kernel function to use
## ... - arguments to pass to kernel function
effective_df <- function(y, x, kern, ...) {
y_hat <- nadaraya_watson(y, x, x,
kern=kern, ...)
sum(diag(attr(y_hat, 'k')))
}
loss_squared_error <- function(y, yhat)
(y - yhat)^2
error <- function(y, yhat, loss=loss_squared_error)
mean(loss(y, yhat))
aic <- function(y, yhat, d)
error(y, yhat) + 2/length(y)*d
View(x_plot)
tr_error <- rep(0,6)
tr_error <- rep(NA,6)
knnaic <- rep(NA,6)
knnaic
rbind(knnaic,10)
cbind(knnaic,10)
knnaic <- NA
rbind(knnaic,10)
rbind(rbind(knnaic,10),10)
tr_error <- rep(NA,6)
test_error <- rep(NA,6)
knnaic <- rep(NA,6)
knnbic <- rep(NA,6)
for (i in 1:6) {
kvalues <- c(3,7,9,15,21,25)
k <- kvalues[i]
y_hat <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = k)
y_test_hat <- knn_fit(y,x,x0,kern = kernel_k_nearest_neighbors, k = k)
edf <- effective_df(y, x, kernel_epanechnikov, lambda=5)
knnaic[i] <- aic(y, y_hat, edf)
knnbic[i] <- bic(y, y_hat, edf)
tr_error[i] <- error(df_tr$times,y_hat)
tr_error[i] <- error(df_test$times,y_test_hat)
}
for (i in 1:6) {
kvalues <- c(3,7,9,15,21,25)
k <- kvalues[i]
y_hat <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = k)
y_test_hat <- knn_fit(y,x,x0,kern = kernel_k_nearest_neighbors, k = k)
edf <- effective_df(y, x, kernel_epanechnikov, lambda=5)
knnaic[i] <- aic(y, y_hat, edf)
knnbic[i] <- bic(y, y_hat, edf)
tr_error[i] <- error(df_tr$times,y_hat)
test_error[i] <- error(df_test$times,y_test_hat)
}
df_plot <- data.frame(tr_error,test_error,knnaic,knnbic)
df_plot
kvalues <- c(3,7,9,15,21,25)
df_plot <- cbind(df_plot,kvalues)
df_plot
library(ggplot2)
ggplot(df_plot) + geom_abline(aes(x = kvalues, y = tr_error))
ggplot(df_plot) + geom_point(aes(x = kvalues, y = tr_error))
## Helper function to view kernel (smoother) matrix
matrix_image <- function(x) {
rot <- function(x) t(apply(x, 2, rev))
cls <- rev(gray.colors(20, end=1))
image(rot(x), col=cls, axes=FALSE)
xlb <- pretty(1:ncol(x))
xat <- (xlb-0.5)/ncol(x)
ylb <- pretty(1:nrow(x))
yat <- (ylb-0.5)/nrow(x)
axis(3, at=xat, labels=xlb)
axis(2, at=yat, labels=ylb)
mtext('Rows', 2, 3)
mtext('Columns', 3, 3)
}
## Compute effective df using NW method
## y  - n x 1 vector of training outputs
## x  - n x p matrix of training inputs
## kern  - kernel function to use
## ... - arguments to pass to kernel function
effective_df <- function(y, x, kern, ...) {
y_hat <- nadaraya_watson(y, x, x,
kern=kern, ...)
sum(diag(attr(y_hat, 'k')))
}
## loss function
## y    - train/test y
## yhat - predictions at train/test x
loss_squared_error <- function(y, yhat)
(y - yhat)^2
## test/train error
## y    - train/test y
## yhat - predictions at train/test x
## loss - loss function
error <- function(y, yhat, loss=loss_squared_error)
mean(loss(y, yhat))
## AIC
## y    - training y
## yhat - predictions at training x
## d    - effective degrees of freedom
aic <- function(y, yhat, d)
error(y, yhat) + 2/length(y)*d
## BIC
## y    - training y
## yhat - predictions at training x
## d    - effective degrees of freedom
bic <- function(y, yhat, d)
error(y, yhat) + log(length(y))/length(y)*d
## training error
tr_error <- rep(NA,6)
test_error <- rep(NA,6)
knnaic <- rep(NA,6)
knnbic <- rep(NA,6)
for (i in 1:6) {
kvalues <- c(3,7,9,15,21,25)
k <- kvalues[i]
y_hat <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = k)
y_test_hat <- knn_fit(y,x,x0,kern = kernel_k_nearest_neighbors, k = k)
edf <- effective_df(y, x, kernel_epanechnikov, lambda=5)
knnaic[i] <- aic(y, y_hat, edf)
knnbic[i] <- bic(y, y_hat, edf)
tr_error[i] <- error(df_tr$times,y_hat)
test_error[i] <- error(df_test$times,y_test_hat)
}
kvalues <- c(3,7,9,15,21,25)
df_plot <- data.frame(tr_error,test_error,knnaic,knnbic)
df_plot <- cbind(df_plot,kvalues)
ggplot(df_plot) + geom_point(aes(x = kvalues, y = tr_error))
ggplot(df_plot) + geom_point(aes(x = kvalues, y = test_error))
ggplot(df_plot) + geom_point(aes(x = kvalues, y = knnaic_error))
## Helper function to view kernel (smoother) matrix
matrix_image <- function(x) {
rot <- function(x) t(apply(x, 2, rev))
cls <- rev(gray.colors(20, end=1))
image(rot(x), col=cls, axes=FALSE)
xlb <- pretty(1:ncol(x))
xat <- (xlb-0.5)/ncol(x)
ylb <- pretty(1:nrow(x))
yat <- (ylb-0.5)/nrow(x)
axis(3, at=xat, labels=xlb)
axis(2, at=yat, labels=ylb)
mtext('Rows', 2, 3)
mtext('Columns', 3, 3)
}
## Compute effective df using NW method
## y  - n x 1 vector of training outputs
## x  - n x p matrix of training inputs
## kern  - kernel function to use
## ... - arguments to pass to kernel function
effective_df <- function(y, x, kern, ...) {
y_hat <- nadaraya_watson(y, x, x,
kern=kern, ...)
sum(diag(attr(y_hat, 'k')))
}
## loss function
## y    - train/test y
## yhat - predictions at train/test x
loss_squared_error <- function(y, yhat)
(y - yhat)^2
## test/train error
## y    - train/test y
## yhat - predictions at train/test x
## loss - loss function
error <- function(y, yhat, loss=loss_squared_error)
mean(loss(y, yhat))
## AIC
## y    - training y
## yhat - predictions at training x
## d    - effective degrees of freedom
aic <- function(y, yhat, d)
error(y, yhat) + 2/length(y)*d
## BIC
## y    - training y
## yhat - predictions at training x
## d    - effective degrees of freedom
bic <- function(y, yhat, d)
error(y, yhat) + log(length(y))/length(y)*d
## training error
tr_error <- rep(NA,6)
test_error <- rep(NA,6)
knnaic <- rep(NA,6)
knnbic <- rep(NA,6)
for (i in 1:6) {
kvalues <- c(3,7,9,15,21,25)
k <- kvalues[i]
y_hat <- knn_fit(y,x,x,kern = kernel_k_nearest_neighbors, k = k)
y_test_hat <- knn_fit(y,x,x0,kern = kernel_k_nearest_neighbors, k = k)
edf <- effective_df(y, x, kernel_epanechnikov, lambda=5)
knnaic[i] <- aic(y, y_hat, edf)
knnbic[i] <- bic(y, y_hat, edf)
tr_error[i] <- error(df_tr$times,y_hat)
test_error[i] <- error(df_test$times,y_test_hat)
}
kvalues <- c(3,7,9,15,21,25)
df_plot <- data.frame(tr_error,test_error,knnaic,knnbic)
df_plot <- cbind(df_plot,kvalues)
ggplot(df_plot) + geom_point(aes(x = kvalues, y = tr_error))
ggplot(df_plot) + geom_point(aes(x = kvalues, y = test_error))
ggplot(df_plot) + geom_point(aes(x = kvalues, y = knnaic))
ggplot(df_plot) + geom_point(aes(x = kvalues, y = knnbic))
inc_flds  <- createFolds(mcycle$accel, k=5)
inc_flds
cvknnreg <- function(kNN = 10, flds=inc_flds) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
inc_trn <- inc[-flds[[tst_idx]],]
inc_tst <- inc[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(Income ~ Education + Seniority,
k=kNN, data=inc_trn)
## compute test error on testing data
pre_tst <- predict(knn_fit, inc_tst)
cverr[tst_idx] <- mean((inc_tst$Income - pre_tst)^2)
}
return(cverr)
}
cverrs <- sapply(1:20, cvknnreg)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs <- sapply(1:20, cvknnreg)
cvknnreg <- function(kNN = 10, flds=inc_flds) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
inc_trn <- inc[-flds[[tst_idx]],]
inc_tst <- inc[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(Income ~ Education + Seniority,
k=kNN, data=inc_trn)
## compute test error on testing data
pre_tst <- predict(knn_fit, inc_tst)
cverr[tst_idx] <- mean((inc_tst$Income - pre_tst)^2)
}
return(cverr)
}
cverrs <- sapply(1:20, cvknnreg)
cvknnreg <- function(kNN = 10, flds=mcycle_flds) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ .,
k=kNN, data=mcycle_trn)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$accel - pre_tst)^2)
}
return(cverr)
}
mcycle_flds  <- createFolds(mcycle$accel, k=5)
cvknnreg <- function(kNN = 10, flds=mcycle_flds) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ .,
k=kNN, data=mcycle_trn)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$accel - pre_tst)^2)
}
return(cverr)
}
cverrs <- sapply(1:20, cvknnreg)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
## make predictions using NW method at training inputs
y_hat <- nadaraya_watson(y, x, x,
kernel_epanechnikov, lambda=5)
## make predictions using NW method at training inputs
y_hat <- nadaraya_watson(y, x, x,
kernel_k_nearest_neighbors, k=3)
## make predictions using NW method at training inputs
y_hat <- nadaraya_watson(y, x, x,
kern = kernel_k_nearest_neighbors, k=3)
y_hat
head(y_hat)
head(y3)
library(tidyverse)
library(readr)
library(vroom)
df <- read_csv('US_Accidents_Dec19.csv')
setwd("C:/Users/ninoy/Desktop/VandyDS/2020spring/dbms/us_accident")
df <- read_csv('US_Accidents_Dec19.csv')
df <- read_csv('US_Accidents_Dec19.csv')
df$Amenity
df$Sunrise_Sunset
df$Civil_Twilight
df$Number
df$`Wind_Chill(F)`
df$Timezone
df$Weather_Timestamp
df$`Wind_Chill(F)`
df$`Humidity(%)`
df$`Pressure(in)`
df$`Visibility(mi)`
df$Wind_Direction
df$`Wind_Speed(mph)`
df$`Precipitation(in)`
df$Weather_Condition
df_sub <- df[1:50000,]
zipair <- df_sub %>% select(Airport_Code,Zipcode)
dim(unique(zipair))
dim(unique(zipair[,2]))
zipair <- df_sub %>% select(Airport_Code,Airport_Code)
dim(unique(zipair))
dim(unique(zipair[,2]))
zipair <- df_sub %>% select(Airport_Code,Zipcode)
dim(unique(zipair))
dim(unique(zipair[,2]))
df$Severity
#4
df_sunli <- df_sub %>% select(Airport_Code, Weather_Timestamp, Sunrise_Sunset)
dim(unique(df_sunli))
dim(unique(unique(df_sunli[,1:2])))
dim(unique(df_sunli))
summary(df_sunli)
summary(df)
summary(df_sub)
library(tidyverse)
library(tidyverse)
library(vroom)
library(vroom)
library(readr)
setwd("C:/Users/ninoy/Desktop/VandyDS/2020spring/dbms")
df <- read_csv('C:/Users/ninoy/Desktop/VandyDS/2020spring/dbms/US_Accidents_Dec19.csv')
df_sub <- sample(df,1000000)
df[1,]
df_nona <- na.omit(df)
summary(df)
df_sub1 <- df[,-c("Precipitation(in)","End_Lat ","End_Lng")]
df_sub1 <- df[,-("Precipitation(in)","End_Lat ","End_Lng")]
df_sub1 <- df[,-"Precipitation(in)",-"End_Lat ",-"End_Lng")]
df_sub1 <- df[,-"Precipitation(in)",-"End_Lat ",-"End_Lng"]
df_sub1 <- df[,-"Precipitation(in)"]
df_sub1 <- df[,-'Precipitation(in)']
df_sub1 <- df[-'Precipitation(in)']
df_sub1 <- df[-'Precipitation(in)',]
df_sub1 <- select(df,-c(End_Lat,End_Lng))
summary(df)
df_sub1 <- select(df,-c(End_Lat,End_Lng,Precipitation(in)))
df_sub1 <- select(df,-c(End_Lat,End_Lng,`Precipitation(in)`))
df_nona <- na.omit(df_sub1)
df_sub1 <- select(df,-c(End_Lat,End_Lng,`Precipitation(in)`, Wind_Chill(F)))
df_sub1 <- select(df,-c(End_Lat,End_Lng,`Precipitation(in)`,` Wind_Chill(F)`))
df_sub1 <- select(df,-c(End_Lat,End_Lng,`Precipitation(in)`,`Wind_Chill(F)`))
df_nona <- na.omit(df_sub1)
write.csv(df_nona, "accident_0402.csv", na = "\\N")
test <- read_csv('C:/Users/ninoy/Desktop/VandyDS/2020spring/dbms/us_accident/accident_0402.csv')
View(test)
df_sub <- df_nona[1:50000,]
# 1
df_sss <- df_sub %>% select(Start_Time, Start_Lat, Start_Lng)
dim(unique(df_sss))
#4
df_sunli <- df_sub %>% select(Airport_Code, Weather_Timestamp, Sunrise_Sunset)
dim(unique(df_sunli))
dim(unique(df_sunli))
dim(unique(unique(df_sunli[,1:2])))
summary(df_sunli)
df_we <- df_sub %>% select(Airport_Code, Weather_Timestamp ,"Temperature(F)","Wind_Chill(F)"    ,     "Humidity(%)"
, "Pressure(in)"          ,"Visibility(mi)"
, "Wind_Direction"       , "Wind_Speed(mph)"      ,"Precipitation(in)"     ,"Weather_Condition")
df_we <- df_sub %>% select(Airport_Code, Weather_Timestamp ,"Temperature(F)"   ,     "Humidity(%)"
, "Pressure(in)"          ,"Visibility(mi)"
, "Wind_Direction"       , "Wind_Speed(mph)"      ,"Precipitation(in)"     ,"Weather_Condition")
df_we <- df_sub %>% select(Airport_Code, Weather_Timestamp ,"Temperature(F)"   ,     "Humidity(%)"
, "Pressure(in)"          ,"Visibility(mi)"
, "Wind_Direction"       , "Wind_Speed(mph)"      , "Weather_Condition")
dim(unique(df_we))
dim(unique(df_we))
dim(unique(df_we[,1:2]))
dim(unique(df_we))
dim(unique(df_we[,1:2]))
df
